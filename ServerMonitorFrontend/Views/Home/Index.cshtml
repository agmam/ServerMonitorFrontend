@using ServerMonitorFrontend.Helpers
@model ServerMonitorFrontend.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Frontpage";
}

<div class="row">

    <div class="col-md-6 padding-md" style="margin: 10px;">
        <div class="panel" style="border: 1px solid gray;">
            <div class="row">
                <div class="col-md-6 padding-md">
                    @Html.Partial("~/Views/Home/_TemperatureDetail.cshtml")

                </div>
                <div class="col-md-6 padding-md">
                    @Html.Partial("~/Views/Home/_ServerDetail.cshtml")
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 padding-md">
                    @Html.Partial("~/Views/Home/_RamDetail.cshtml")
                </div>
                <div id="eventContainer" class="col-md-6 padding-md">
                    @Html.Partial("~/Views/Home/_EventDetail.cshtml", Model.Events)
                </div>
            </div>
        </div>
    </div>


    <div class="col-md-5">
        <div class="row">
            <div class="outer-canvas-container" style="margin-top:15px;">
                <canvas id="canvas-cpu-graph" class="box-shadow padding-canvas"></canvas>
            </div>

        </div>
        <div class="row">
            <div class="outer-canvas-container" style="margin-top:15px;">
                <canvas id="canvas-network-graph" class="box-shadow padding-canvas"></canvas>
            </div>

        </div>
    </div>

</div>




<script>
    //Get the server from the dropdown, so we know what to display for
    var serverToDisplay = $('#server-dropdown').val();


    //colors
    var color = Chart.helpers.color;
    //font family
    Chart.defaults.global.defaultFontFamily = "Tahoma";

    //Get the canvas
    var ctxCpu = document.getElementById("canvas-cpu-graph").getContext("2d");
    var ctxNetwork = document.getElementById("canvas-network-graph").getContext("2d");

    //Configuration for CPU graph
    var configCpu = {
        type: 'line',
       
        data: {
                datasets: [{
                    lineTension: 0,
                    label: "CPU Utilization %",
                    backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
                    data: @Html.JsonInsert(Model.GraphDatasCpu),
                    fill: false,
                    yAxisID: "y-axis-0",
                    borderColor: window.chartColors.blue
                }, {
                    lineTension: 0,
                    label: "Temperature °C",
                    backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
                    data: @Html.JsonInsert(Model.GraphDatasTemperature),
                    fill: false,
                    yAxisID: "y-axis-1",
                    borderColor: window.chartColors.red
            }]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: "CPU Utilization/Temperature",
                fontSize: 16
            },
            scales: {
                xAxes: [{
                    type: "time",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Time',
                        fontSize: 14

                    },
                    ticks: {
                        autoSkip: false,
                        maxRotation: 45,
                        minRotation: 45,
                        fontSize: 14
                    },
                    unit: 'hour',
                    unitStepSize: 1,
                    time: {
                        displayFormats: {
                            'hour': 'HH:mm'
                        }
                    }
                }],
                yAxes: [{
                    position: "left",
                    id: "y-axis-0",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: '% utilization',
                        fontSize: 14

                    },
                    ticks: {
                        fontSize: 14
                    }
                },{
                    position: "right",
                    id: "y-axis-1",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Temperature',
                        fontSize: 14

                    },
                    ticks: {
                        fontSize: 14
                    }
                }]
            },
            legend:{
                display: true
            },
            tooltips: {
                callbacks: {
                    label: function(tooltipItem, data) {
                        if (tooltipItem.datasetIndex === 0) {
                            return Math.round(data.datasets[0].data[tooltipItem.index].y) + "%";
                        } else {
                            return Math.round(data.datasets[1].data[tooltipItem.index].y) + '°C';
                        }
                    },
                    title: function(tooltipItems, data) {
                        var tooltipItem = tooltipItems[0];
                        var time = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].x;

                        return 'Time: ' + moment(time).format('HH:mm');;
                    }
                }
            }
        }
    }
    window.CpuChart = new Chart(ctxCpu, configCpu);


    //configuration network start
    var configNetwork = {
        type: 'line',
        data: {
            datasets: [{
                lineTension:0,
                label: "Network Utilization in percentage",
                backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
                borderColor: window.chartColors.red,
                fill: false,
                data: @Html.JsonInsert(Model.GraphDatasNetwork)
                }]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: "Network Utilization",
                fontSize: 16
            },
            scales: {
                xAxes: [{
                    type: "time",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Time',
                        fontSize: 14

                    },
                    ticks: {
                        autoSkip: false,
                        maxRotation: 45,
                        minRotation: 45,
                        fontSize: 14
                    },
                    unit: 'hour',
                    unitStepSize: 1,
                    time: {
                        displayFormats: {
                            'hour': 'HH:mm'
                        }
                    }
                }],
                yAxes: [{
                    position: "left",
                    id: "y-axis-0",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: '% utilization',
                        fontSize: 14

                    },
                    ticks: {
                        fontSize: 14
                    }
                }]
            },
            legend:{
                display: false
            },
            tooltips: {
                callbacks: {
                    label: function(tooltipItem, data) {
                        var util = data.datasets[0].data[tooltipItem.index].y;
                        var rounded = Math.round(util*10)/10;
                        return "Network utilization " + rounded;
                    },
                    title: function(tooltipItems, data) {
                        var tooltipItem = tooltipItems[0];
                        var time = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].x;

                        return 'Time: ' + moment(time).format('HH:mm');;
                    }
                }
            }
        }
    }
    window.NetworkChart = new Chart(ctxNetwork, configNetwork);

    // Gauge start

    jQuery.fn.gauge = function(opts) {
        this.each(function() {
            var $this = $(this),
                data = $this.data();

            if (data.gauge) {
                data.gauge.stop();
                delete data.gauge;
            }
            if (opts !== false) {
                data.gauge = new Gauge(this).setOptions(opts);
            }
        });
        return this;
    };
    var opts = {
        angle: -0.2, // The span of the gauge arc
        lineWidth: 0.2, // The line thickness
        radiusScale: 0.9, // Relative radius
        pointer: {
            length: 0.57, // // Relative to gauge radius
            strokeWidth: 0.045, // The thickness
            color: '#333' // Fill color
        },
        limitMax: false,     // If false, max value increases automatically if value > maxValue
        limitMin: true,     // If true, the min value of the gauge will be fixed
        colorStart: '#6F6EA0',   // Colors
        colorStop: '#C0C0DB',    // just experiment with them
        strokeColor: '#333',  // to see which ones work best for you
        generateGradient: true,
        highDpiSupport: true,     // High resolution support
        staticZones: [
            {strokeStyle: "#F03E3E", min: 90, max: 100}, // Red from 90 to 100
            {strokeStyle: "#FFDD00", min: 69, max: 90}, // Yellow
            {strokeStyle: "#30B32D", min: 0, max: 69}, // Green
        ],staticLabels: {
            font: "15px sans-serif",  // Specifies font
            labels: [10, 20, 30, 40, 50, 60, 70, 80, 90],  // Print labels at these values
            color: "#000000",  // Optional: Label text color
            fractionDigits: 0  // Optional: Numerical precision. 0=round off.
        },
    };
    var target = document.getElementById('canvas-Temp-gauge'); // your canvas element
    var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
    gauge.maxValue = 100; // set max gauge value
    gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
    gauge.animationSpeed = 44; // set animation speed (32 is default value)
    gauge.set(@Html.JsonInsert(Model.ServerModel.CurrentTemperature)); // set actual value

    function h() {
        gauge.set(@Html.JsonInsert(Model.ServerModel.CurrentTemperature));
    }

    h();
    UpdateServerData();
    $("#server-dropdown").change(function() {
       
        serverToDisplay = this.options[this.selectedIndex].value;
       
        UpdateServerData();
    });

    function UpdateServerData() {
        $.ajax({
            url: "/Home/GetServerModel?serverId=" + serverToDisplay,
            type: 'GET',
            dataType   : 'json',
            contentType: 'application/json; charset=UTF-8',
            success: function (data) {
                $('#eventContainer').load("/Home/GetEventPartialView?serverId="+ serverToDisplay);
                if (data.ServerModel.ServerUp === false) {
                    //LED GREEN
                    $(".led-green").addClass("led-red").removeClass("led-green");
                   

                    //SERVER INFORMATION
                    $('#UpDownTime').html("Down time");
                    $('#currentProcesses').hide();
                    $('#dataReceivedDate').hide();
                    $('#currentThreads').hide();

                    //RAM DIAGRAM
                    $('#ram-available').css("display", "none");
                    $('#ram-unavailable').css("display", "block").css("font-size", "11px");
                    $('#ram-total-text').css("display", "block");
                    $('#ram-available-text').css("display", "block");

                    //TEmperature
                    $('#temperature-available').css("display", "none");
                    $('#temperature-unavailable').css("display", "block").css("font-size", "11px");
                    

                    $('#dataReceivedDate').html(moment(data.ServerModel.DataReceived).format('DD/MM - HH:mm'));


                } else {
                    //RAM DIAGRAM
                    $('#ram-available').css("display", "block");
                    $('#ram-unavailable').css("display", "none");
                    $('#ram-unavailable-text').html('Used: '+ ConvertToGbFormat(GetUsedRAM(data.RAMTotal, data.RAMAvailable))
                        + ' (' + PercentUnavailable(data.RAMTotal, data.RAMAvailable) + '%)');
                    $('#ram-available-text').html('Free: '+ ConvertToGbFormat(data.RAMAvailable)
                    + ' (' + PercentAvailable(data.RAMTotal, data.RAMAvailable) + '%)');

                    //TEmperature
                    $('#temperature-available').css("display", "block");
                    $('#temperature-unavailable').css("display", "none");  


                    //LED RED
                    $('.led-red').addClass("led-green").removeClass("led-red");

                    $('#UpDownTime').html("Up time");
                    $('#currentProcesses').show();
                    $('#dataReceivedDate').show();
                    $('#currentThreads').show();
                    $('#currentThreads').html(data.ServerModel.Threads);
                    $('#upTime').html(data.ServerModel.UpTime);
                    $('#currentProcesses').html(data.ServerModel.Handles);
                    $('#dataReceivedDate').html(moment(data.ServerModel.DataReceived).format('DD/MM - HH:mm'));
                }


                //Update the graph with CPU DATA
                $.each(data.GraphDatasCpu, function( index, value ) {
                    value.x = formatJSONDate(value.x);

                });
                $.each(data.GraphDatasNetwork, function( index, value ) {
                    value.x = formatJSONDate(value.x);

                });


                configCpu.data.datasets[0].data = data.GraphDatasCpu;
                configCpu.data.datasets[1].data = data.GraphDatasTemperature;

                configNetwork.data.datasets[0].data = data.GraphDatasNetwork;


                gauge.set(data.ServerModel.CurrentTemperature);

                //RAM
                configRam.data.datasets[0].data =
                { "0": PercentUnavailable(data.ServerModel.RAMTotal, data.ServerModel.RAMAvailable),
                    "1":PercentAvailable(data.ServerModel.RAMTotal, data.ServerModel.RAMAvailable)}




                //actual update
                window.ramPie.update();
                window.NetworkChart.update();
                window.CpuChart.update();


            },
            error: function (error) {
                console.log('Error: ' + JSON.stringify(error));
            }
        });
    }
    setInterval(UpdateServerData, 100 * 60 * 1);
    function formatJSONDate(jsonDate) {

        var dateString = jsonDate.substr(6);
        var currentTime = new Date(parseInt(dateString ));
        var month =doubledigitdate( currentTime.getMonth() + 1);
        var day = doubledigitdate(currentTime.getDate());
        var year = currentTime.getFullYear();
        var hours =doubledigitdate( currentTime.getHours());
        var min = doubledigitdate(currentTime.getMinutes());
        var sec =doubledigitdate( currentTime.getSeconds());
        var date = year + "-" + month + "-" + day+"T"+ hours +":"+min+":"+sec;


        return date;
    }
    function doubledigitdate(num) {
        if (num < 10) {
            return "0" + num;
        } else {
            return num;
        }
    }

    //RAM
    //Pie chart
    var configRam = {

        type: 'pie',
        data: {
            datasets: [{
                data: [
                    PercentAvailable(@Model.ServerModel.RAMTotal, @Model.ServerModel.RAMAvailable),
                    PercentUnavailable(@Model.ServerModel.RAMTotal, @Model.ServerModel.RAMAvailable)
                ],
                backgroundColor: [
                    window.chartColors.red,
                    window.chartColors.green
                ],
                label: 'Dataset 1'
            }],
            labels: [
                "Used",
                "Free"
            ]
        },
        options: {
            responsive: true
        }
    };
    function PercentAvailable(total, available) {
        return Math.round(available/total*100);
    };
    function PercentUnavailable(total, available) {
        return Math.round(100-available/total*100);
    };
    var ctxRam = document.getElementById("canvas-ram").getContext("2d");
    window.ramPie = new Chart(ctxRam, configRam);
    function GetUsedRAM(total, available)
    {
        return total-available;
    };
    function ConvertToGbFormat(mb)
    {
        return formatBytes(mb*1000*1000);
    }
    function formatBytes(bytes) {
        if(bytes < 1024) return bytes + " Bytes";
        else if(bytes < 1048576) return(bytes / 1024).toFixed(2) + " KB";
        else if(bytes < 1073741824) return(bytes / 1048576).toFixed(2) + " MB";
        else return(bytes / 1073741824).toFixed(2) + " GB";
    };

</script>
